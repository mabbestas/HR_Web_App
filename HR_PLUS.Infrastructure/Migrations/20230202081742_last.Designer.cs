// <auto-generated />
using System;
using HR_PLUS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HR_PLUS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230202081742_last")]
    partial class last
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HR_Plus.Domain.Entities.AdvancePayment", b =>
                {
                    b.Property<int>("AdvancePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdvancePaymentDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AdvancePaymentId");

                    b.HasIndex("AppUserId");

                    b.ToTable("AdvancePayments");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1a81c03c-eb91-4dac-b532-a474b08c7936",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "06194da6-3ecf-4f99-a54c-4589f8865e9f",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Manager",
                            NormalizedName = "MANAGER",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "ac7c1bc6-5f6d-4888-b074-d13ee62dfac4",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 0
                        });
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("WorkingSituation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "İSTANBUL",
                            BirthDate = new DateTime(2023, 2, 2, 11, 17, 41, 696, DateTimeKind.Local).AddTicks(169),
                            CompanyId = 1,
                            ConcurrencyStamp = "6c8fa227-2aaf-4bb7-a088-df28db3bce2b",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "burak.bestas@hotmail.com",
                            EmailConfirmed = true,
                            FirstLogin = true,
                            Gender = 1,
                            HireDate = new DateTime(2023, 2, 2, 11, 17, 41, 696, DateTimeKind.Local).AddTicks(460),
                            IsManager = false,
                            LockoutEnabled = false,
                            Name = "Burak",
                            NormalizedEmail = "burak.bestas@hotmail.com",
                            NormalizedUserName = "BURAK.BESTAS@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFr5dgNMPKiCu72I4BOkrmVgBxO17l19BqVO6giQFEaeij0qdmhqo85P1MwKmMA9mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "sfsdfsdf",
                            Status = 1,
                            Surname = "BEŞTAŞ",
                            TwoFactorEnabled = false,
                            UserName = "burak.bestas@hotmail.com",
                            WorkingSituation = true
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Atakum/SAMSUN",
                            BirthDate = new DateTime(2023, 2, 2, 11, 17, 41, 707, DateTimeKind.Local).AddTicks(7964),
                            CompanyId = 1,
                            ConcurrencyStamp = "61c6cc67-f2ea-4c6b-a9d2-8609b9c0931a",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alitopluu@gmail.com",
                            EmailConfirmed = true,
                            FirstLogin = true,
                            Gender = 1,
                            HireDate = new DateTime(2023, 2, 2, 11, 17, 41, 707, DateTimeKind.Local).AddTicks(7983),
                            IsManager = false,
                            LockoutEnabled = false,
                            Name = "Ali",
                            NormalizedEmail = "alitopluu@gmail.com",
                            NormalizedUserName = "ALITOPLUU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEfxbEnLCgoF5veIpubXo8w5w+bFQc8iFOc/umIPbzR+0rCPuNDF2CcIWVuuiFTppA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfhfdgh",
                            Status = 1,
                            Surname = "TOPLU",
                            TwoFactorEnabled = false,
                            UserName = "alitopluu@gmail.com",
                            WorkingSituation = true
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "ANKARA",
                            BirthDate = new DateTime(2023, 2, 2, 11, 17, 41, 715, DateTimeKind.Local).AddTicks(1281),
                            CompanyId = 1,
                            ConcurrencyStamp = "ff0dbae3-8b87-4fc3-bae1-ee048ebb3560",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ugras.ulascan@hotmail.com",
                            EmailConfirmed = true,
                            FirstLogin = true,
                            Gender = 1,
                            HireDate = new DateTime(2023, 2, 2, 11, 17, 41, 715, DateTimeKind.Local).AddTicks(1286),
                            IsManager = true,
                            LockoutEnabled = false,
                            Name = "Ulaşcan",
                            NormalizedEmail = "ugras.ulascan@hotmail.com",
                            NormalizedUserName = "UGRAS.ULASCAN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI64Bj8C0iDgxoXZhz5m6QH7d7doOPS31JFRbWJvXgd11HYTMLwxxS4CDS6N4JxUYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "sfsdfsdf",
                            Status = 1,
                            Surname = "UĞRAŞ",
                            TwoFactorEnabled = false,
                            UserName = "ugras.ulascan@hotmail.com",
                            WorkingSituation = true
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "İstanbul",
                            BirthDate = new DateTime(2023, 2, 2, 11, 17, 41, 722, DateTimeKind.Local).AddTicks(6105),
                            CompanyId = 1,
                            ConcurrencyStamp = "466765ca-1a63-41be-b08a-f57f57246cba",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "handebalaban92@gmail.com",
                            EmailConfirmed = true,
                            FirstLogin = true,
                            Gender = 2,
                            HireDate = new DateTime(2023, 2, 2, 11, 17, 41, 722, DateTimeKind.Local).AddTicks(6108),
                            IsManager = false,
                            LockoutEnabled = false,
                            Name = "Hande",
                            NormalizedEmail = "handebalaban92@gmail.com",
                            NormalizedUserName = "HANDEBALABAN92@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHQFEjZ5CcHwGA3z1Xh6/cVAmvFtzuxtCiWt90jvYJzahnaOVYHZmjWUpPxbEQe4Fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "sdfsdf",
                            Status = 1,
                            Surname = "BALABAN",
                            TwoFactorEnabled = false,
                            UserName = "handebalaban92@gmail.com",
                            WorkingSituation = true
                        });
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            Adress = "Caferağa Mah. Mühürdar Cad. No:76 Kadıköy / İSTANBUL​",
                            CompanyEmail = "info@bilgeadam.com",
                            CompanyName = "BilgeAdam",
                            CreateDate = new DateTime(2023, 2, 2, 11, 17, 41, 694, DateTimeKind.Local).AddTicks(6900),
                            PhoneNumber = "444 33 30",
                            Status = 1,
                            TaxIdentificationNumber = "6589424168"
                        });
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExpenseId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermissionDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("PermissionExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PermissionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.PermissionType", b =>
                {
                    b.Property<int>("PermissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermissionTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionTypeId");

                    b.ToTable("PermissionTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.AdvancePayment", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AdvancePayments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.Company", "Company")
                        .WithMany("AppUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.Expense", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Expenses")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.Permission", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Permissions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Plus.Domain.Entities.PermissionType", "PermissionType")
                        .WithOne("Permission")
                        .HasForeignKey("HR_Plus.Domain.Entities.Permission", "PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("PermissionType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Plus.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HR_Plus.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AdvancePayments");

                    b.Navigation("Expenses");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.Company", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("HR_Plus.Domain.Entities.PermissionType", b =>
                {
                    b.Navigation("Permission");
                });
#pragma warning restore 612, 618
        }
    }
}
